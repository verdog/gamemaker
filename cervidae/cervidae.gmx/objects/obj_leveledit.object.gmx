<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>mask_block</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>mask_block</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Setup

global.REDIT_tray[0] = obj_block;
global.REDIT_tray[1] = obj_block_bg;
global.REDIT_tray[2] = obj_brick;
global.REDIT_tray[3] = obj_full;
global.REDIT_tray[4] = obj_air;
global.REDIT_tray[5] = obj_door_1;
global.REDIT_tray[6] = obj_door_2;
global.REDIT_tray[7] = obj_door_prev;
global.REDIT_tray[8] = obj_spawn;

global.REDIT_objects = 9; // Objects in selection cycle

global.REDIT_current = 0;

mask_index = mask_block;
depth = -100;

fname = "";
msg_exp = -1;
msg_imp = -1;
msg_imp_ran = -1;

px = x;
py = y;

prevx = mouse_x;
prevy = mouse_y;
dx = 0;
dy = 0;
prec = 64; // precision for line drop
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Placing objects

// Cursor

sprite_index = object_get_sprite(global.REDIT_tray[global.REDIT_current]);

// Grid lock

x = T*(mouse_x div T);
y = T*(mouse_y div T);

// Select block

if (mouse_check_button_released(mb_middle))
{
    if (global.REDIT_current = global.REDIT_objects - 1)
    {
        global.REDIT_current = 0;
    }
    else
    {
        global.REDIT_current++;
    }
}

// Setting up deltax/y

dx = mouse_x - prevx;
dy = mouse_y - prevy;

// Shift release
if (keyboard_check_released(vk_shift)){
    prevx = mouse_x;
    prevy = mouse_y;
    dx = 0;
    dy = 0;
}

// Placing objects

current = global.REDIT_tray[global.REDIT_current];


if (mouse_check_button(mb_left) &amp;&amp; !mouse_check_button(mb_right) &amp;&amp; !keyboard_check(vk_shift))
{
    placeBlocksInLine(prevx,prevy,dx,dy);
}

// Deleting objects

if (mouse_check_button(mb_right) &amp;&amp; !mouse_check_button(mb_left) &amp;&amp; !keyboard_check(vk_shift))
{
    eraseBlocksInLine(prevx,prevy,dx,dy);
}

// Line draw
if (keyboard_check(vk_shift)){
    // place
    if (mouse_check_button_pressed(mb_left) &amp;&amp; !mouse_check_button(mb_right)){
        prevx = mouse_x;
        prevy = mouse_y;
    }
    if (mouse_check_button_released(mb_left) &amp;&amp; !mouse_check_button(mb_right)){
        dx = mouse_x - prevx;
        dy = mouse_y - prevy;
        placeBlocksInLine(prevx,prevy,dx,dy);
    }
    
    // erase
    if (mouse_check_button_pressed(mb_right) &amp;&amp; !mouse_check_button(mb_left)){
        prevx = mouse_x;
        prevy = mouse_y;
    }
    if (mouse_check_button_released(mb_right) &amp;&amp; !mouse_check_button(mb_left)){
        dx = mouse_x - prevx;
        dy = mouse_y - prevy;
        eraseBlocksInLine(prevx,prevy,dx,dy);
    }
}

// Build

if (keyboard_check_released(ord('C')))
{
    level_grid_read();
    place_objects();
    tile_all_auto();
}

// Export

if (keyboard_check_released(ord('E')) &amp;&amp; keyboard_check_direct(vk_control))
{
    msg_exp = get_string_async("Enter a level path", ".slvl");
}

// Import

if (keyboard_check_released(ord('I')) &amp;&amp; keyboard_check_direct(vk_control))
{
    msg_imp = get_string_async("Enter a level path", ".slvl");
}

// Import random

if (keyboard_check_released(ord('T')) &amp;&amp; keyboard_check_direct(vk_control))
{
    room_import_random();
}

// Reset
if (keyboard_check_released(ord('R')) &amp;&amp; keyboard_check_direct(vk_control))
{
    fname = "default";
    room_import();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// debug stuff

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="63">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Dialouge

var i_d = async_load[? "id"];

if (i_d == msg_exp)
{    
    if (async_load[? "status"])
    {
        fname = async_load[? "result"];
        room_export();
    }   
}

if (i_d == msg_imp)
{    
    if (async_load[? "status"])
    {
        fname = async_load[? "result"];
        room_import();
    }   
}

if (i_d == msg_imp_ran)
{    
    if (async_load[? "status"])
    {
        room_import_random();
    }   
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// debug lines

// debug
draw_set_colour(c_white);
draw_line(prevx,prevy,prevx+dx,prevy+dy);

if (!(keyboard_check(vk_shift)&amp;&amp;mouse_check_button(mb_left))
    &amp;&amp; !(keyboard_check(vk_shift)&amp;&amp;mouse_check_button(mb_right))) {
    prevx = mouse_x;
    prevy = mouse_y;
}

draw_sprite(sprite_index,-1,x,y);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
