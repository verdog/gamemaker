<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// init

// zoom factor
zoomFactor = 1;

// create visited list
visitList[0] = true;
for (var i=1;i&lt;=obj_planet.size;i++){
    visitList[i] = false;
}

// visitList[i] is true once the room has been visited.

// create graphics coordinates grid

mapSize = T*6;

mapDotX[0] = mapSize/2;
mapDotY[0] = mapSize/2;

var len = random_range(mapSize/8,mapSize/2);;
var dir = irandom(360);
var density = 2; // planets per ring

for (var i=1;i&lt;=obj_planet.size;i++){
    if (i mod density == 0){
        len = random_range(mapSize/16,mapSize/2);
        len = clamp(len,0,mapSize/2);
    }
    dir += 360/obj_planet.size + random_range(-360/obj_planet.size,360/obj_planet.size);
    
    mapDotX[i] = mapDotX[0] + lengthdir_x(len,dir);
    mapDotY[i] = mapDotY[0] + lengthdir_y(len,dir);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw map

// debug
if (global.debug &amp;&amp; keyboard_check(ord('M'))){
    event_perform(ev_create,0);
}

// enlarge
if ((keyboard_check(ord('M')) || gamepad_button_check(0,gp_shoulderlb))){
    zoomFactor = 2.4;
} else {
    zoomFactor = 1;
}

mapOriginX = view_xview[0] + T;
mapOriginY = view_yview[0] + view_hview[0] - T - mapSize*zoomFactor;

/***************************************************
  Drawing
 ***************************************************/

// background
draw_set_color(c_black);
draw_set_alpha(.5);

draw_circle(mapOriginX + mapSize*zoomFactor/2,
            mapOriginY + mapSize*zoomFactor/2,
            (mapSize/2 + mapSize/8) * zoomFactor
            ,false);
draw_set_color(c_white);
draw_circle(mapOriginX + mapSize*zoomFactor/2,
            mapOriginY + mapSize*zoomFactor/2,
            (mapSize/2 + mapSize/8) * zoomFactor
            ,true);
/*
draw_rectangle(mapOriginX - 8,
                      mapOriginY - 8,
                      mapOriginX + mapSize*zoomFactor + 8,
                      mapOriginY + mapSize*zoomFactor + 8,
                      false);
*/

// connecting lines
for (var i=0;i&lt;=obj_planet.size;i++){
    // door 1
    if (visitList[i] == true || global.curlvl == i || global.debug){
        if (i == global.curlvl){
            draw_set_color(c_red);
            draw_set_alpha(1);
        } else {
            draw_set_color(c_white);
            draw_set_alpha(0.1);
        }
        draw_arrow(mapOriginX + mapDotX[i] * zoomFactor,
                  mapOriginY + mapDotY[i] * zoomFactor,
                  mapOriginX + mapDotX[global.door_1_list[| i]] * zoomFactor,
                  mapOriginY + mapDotY[global.door_1_list[| i]] * zoomFactor,
                  4 * zoomFactor);
    }
    
    // door 2
    if ((visitList[i] == true || global.curlvl == i || global.debug) &amp;&amp; global.room_properties[# i, 1] == true){
    
        if (i == global.curlvl){
            draw_set_color(c_blue);
            draw_set_alpha(1);
        } else {
            draw_set_color(c_white);
            draw_set_alpha(0.1);
        }
        draw_arrow(mapOriginX + mapDotX[i] * zoomFactor,
                  mapOriginY + mapDotY[i] * zoomFactor,
                  mapOriginX + mapDotX[global.door_2_list[| i]] * zoomFactor,
                  mapOriginY + mapDotY[global.door_2_list[| i]] * zoomFactor,
                  4 * zoomFactor);
    }
}

// draw current again
// door 1
/*
draw_set_color(c_red);
draw_set_alpha(1);
draw_arrow(mapOriginX + mapDotX[global.curlvl] * zoomFactor,
          mapOriginY + mapDotY[global.curlvl] * zoomFactor,
          mapOriginX + mapDotX[global.door_1_list[| global.curlvl]] * zoomFactor,
          mapOriginY + mapDotY[global.door_1_list[| global.curlvl]] * zoomFactor,
          4 * zoomFactor);
          */

// door 2
if (global.room_properties[# global.curlvl, 1] == true){
    draw_set_color(c_blue);
    draw_set_alpha(1);
    draw_arrow(mapOriginX + mapDotX[global.curlvl] * zoomFactor,
              mapOriginY + mapDotY[global.curlvl] * zoomFactor,
              mapOriginX + mapDotX[global.door_2_list[| global.curlvl]] * zoomFactor,
              mapOriginY + mapDotY[global.door_2_list[| global.curlvl]] * zoomFactor,
              4 * zoomFactor);
}

// dot array
draw_set_color(c_aqua);
draw_set_alpha(1);
for (var i=0;i&lt;=obj_planet.size;i++){
    if (visitList[i] == true || global.debug){
        draw_circle(mapOriginX + mapDotX[i] * zoomFactor,
                    mapOriginY + mapDotY[i] * zoomFactor,
                    1* zoomFactor,false);
    }
}

// current room
draw_circle_colour(mapOriginX + mapDotX[global.curlvl] * zoomFactor,
                   mapOriginY + mapDotY[global.curlvl] * zoomFactor,
                   2.5 * zoomFactor,-1,c_white,true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
