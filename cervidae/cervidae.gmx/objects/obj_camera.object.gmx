<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_camera</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set view
if (!view_enabled)
{
    view_enabled = true;
    view_visible[0] = true;
}
view_object[0] = self;
view_hborder[0] = room_width;
view_vborder[0] = room_height;

view_wport[0] = global.game_width;
view_hport[0] = global.game_height;
view_wview[0] = global.game_width;
view_hview[0] = global.game_height;
display_set_gui_size(global.game_width*global.zoom, global.game_height*global.zoom);
room_speed = 60;
display_reset(0, true);

// Hide
//sprite_index = spr_clear;

// variables

move = 1;
target = 0;
constant = (1/128);
offset = 0;
waittime = 300; // wait time after player stops moving to reset camera

// mode
mode = 0;

// screenshake stuff
screenShakeIntesity = 0;
screenShakeDecay = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// return room speed to 60
room_speed = 60;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// This alarm is used for the screenShake script
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// switch to mode 1 (return to center)
mode = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Stop moving
move = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Keep correct window size

if (window_get_height() != global.game_height*global.zoom
    || window_get_width() != global.game_width*global.zoom)
{
    window_set_size(global.game_width*global.zoom, global.game_height*global.zoom);
    surface_resize(application_surface, global.game_width, global.game_height);
    display_reset(0, true);
}

if (keyboard_check_released(ord('1')))
{
    global.zoom = 1;
}
if (keyboard_check_released(ord('2')))
{
    global.zoom = 2;
}
if (keyboard_check_released(ord('3')))
{
    global.zoom = 3;
}
if (keyboard_check_released(ord('4')))
{
    global.zoom = 4;
}
if (keyboard_check_released(ord('5')))
{
    global.game_width = 24*T;
    global.game_height = 14*T;
    view_wport[0] = global.game_width;
    view_hport[0] = global.game_height;
    view_wview[0] = global.game_width;
    view_hview[0] = global.game_height;
}
if (keyboard_check_released(ord('6')))
{
    global.game_width = 16*T;
    global.game_height = 9*T;
    view_wport[0] = global.game_width;
    view_hport[0] = global.game_height;
    view_wview[0] = global.game_width;
    view_hview[0] = global.game_height;
}
if (keyboard_check_released(ord('7')))
{
    global.game_width = 32*T;
    global.game_height = 18*T;
    view_wport[0] = global.game_width;
    view_hport[0] = global.game_height;
    view_wview[0] = global.game_width;
    view_hview[0] = global.game_height;
}
if (keyboard_check_released(ord('9')))
{
    global.game_width = 50*T;
    global.game_height = 25*T;
    view_wport[0] = global.game_width;
    view_hport[0] = global.game_height;
    view_wview[0] = global.game_width;
    view_hview[0] = global.game_height;
}
if (keyboard_check_released(ord('0')))
{
    global.game_width = 32*T;
    global.game_height = 32*T;
    view_wport[0] = global.game_width;
    view_hport[0] = global.game_height;
    view_wview[0] = room_width;
    view_hview[0] = room_height;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Screenshake code

// Shake
if (alarm[2] &gt; 0){
    x += lengthdir_x(screenShakeIntensity, random(360));
    y += lengthdir_y(screenShakeIntensity, random(360));
    screenShakeIntensity -= screenShakeDecay;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="72">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// background controls

var vwmax = room_width - view_wview[0];
var bwmax = room_width - background_width[0];

var vhmax = room_height - view_hview[0];
var bhmax = room_height - background_height[0];

background_x[0] = lerp(0,bwmax,view_xview[0]/vwmax);
background_y[0] = lerp(0,bhmax,view_yview[0]/vhmax);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Follow player

// mask
mask_index = spr_clear;

// dubug

if (global.debug) {
    draw_sprite(sprite_index,-1,x,y);
    draw_text(x,y-16,string(mode) +
    " " + string(alarm[0]) +
    " " + string(alarm[1])
    );
}

// determine mode
if (abs(obj_player.spd_x) &gt; 1 || abs(obj_player.spd_y) &gt; 1){
    mode = 0;
    alarm[1] = waittime;
} else {
    if (alarm[0] &lt; 0) alarm[0] = 33;
    if (alarm[1] &lt; 0) {alarm[1] = waittime;}
}

if (mode == 0) // mode 0: move normally
{
    // y movement
    y += (obj_player.y - y)*(1/6);
    
    // Adjust target
    target = sign(obj_player.spd_x)*5*T;
    
    // determine if camera should move
    if (abs(obj_player.spd_x) &gt; 0.2){
        move = 1;
        alarm[1] = waittime;
    }
    
    // Adjust constant
    // this controls how fast the camera moves
    // smaller is slower
    contant = 0.0156; // ~1/64
    
    // Offset
    
    if (move) {
        offset += (target - offset)*constant;
    }
    
    // Move camera
    x = obj_player.x + offset;
    
} else if (mode == 1){ // mode 1: return to player
    // reset mode 0 stuff
    offset = x - obj_player.x;

    // x movement
    x += (obj_player.x - x)*(1/12);
    // y movement
    y += (obj_player.y - y)*(1/6);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
