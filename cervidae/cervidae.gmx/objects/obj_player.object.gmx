<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_dog_run</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init

// Create camera

instance_create(x,y,obj_camera);

// Health
hp = 100;
dead = false;
invuln = false;
invulntime = 180;
invulnblink = false; // if yes, sprite will be invisible/transparent/whatever i decide on

// Debug

fly = false;
global.debug = false;

// Navigation

global.curlvl = 0;

/*********************
* Movement variables *
**********************/

// Key maps

map_right = ord('D');
map_left = ord('A');
map_up = ord('W');
map_down = ord('S');

// Movement speeds

input_x = 0;
input_y = 0;

spd_y = 0;
spd_x = 0;
spd_x_prev = 0;

acc_x = .28;
acc_y = .22;

// Max speed achieved by input
move_max_x = 2;
move_max_y = 3;

// Jump strength

jump_power = 3.8;

// Locations

onground_prev = false; // Grounded on previous frame?

// Friction

frict_x = 0.75;
frict_y = 0.9;
frict_air = 0.96;
frict_air_fly = 0.98;
frict_wall = 0.90;

// Target wallslide speed
spd_wallslide = 2;

// Gravity

grav_personal = global.grav;

// Sprite variables

animstate = "idle";
dir = 1;
lastDir = 1;
dir_prev = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///invuln blink
if (invulnblink) invulnblink = false;
else invulnblink = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// reset invulnerability

invuln = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// movement/aim

player_move();

// particles

if (onground(x,y) &amp;&amp; abs(spd_x) &gt; 1.6)
{
    prts_walkdust(x+8,y+14,true)
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// doors

travel_map = global.key_down_release || gamepad_button_check_released(0,gp_face2);

if (instance_exists(obj_planet))
{
    if (place_meeting(x, y, obj_door_1) &amp;&amp; travel_map)
    {
        travel(1,true);
    }
    else if (place_meeting(x, y, obj_door_2) &amp;&amp; travel_map)
    {
        travel(2,true);
    }
    else if (place_meeting(x, y, obj_door_prev) &amp;&amp; travel_map)
    {
        travel(3,true);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// weapons

weapon_control();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// debug stuff

if (global.debug &amp;&amp; keyboard_check(ord('C')) &amp;&amp; mouse_check_button_pressed(mb_left)){
    instance_create(mouse_x,mouse_y,obj_chest);
}

if (keyboard_check_pressed(ord('R')) &amp;&amp; !keyboard_check(vk_control)) level_restart();

if (global.debug &amp;&amp; keyboard_check_pressed(vk_numpad1)){
    travel(1, false);
}
if (global.debug &amp;&amp; keyboard_check_pressed(vk_numpad2)){
    travel(2, false);
}

if (mouse_check_button(mb_left) &amp;&amp; mouse_check_button(mb_right))
{
    x = mouse_x;
    y = mouse_y;
    view_object[0] = noone;
    spd_x = 0;
    spd_y = 0;
}
else
{
    view_object[0] = obj_camera;
}

if keyboard_check_pressed(ord('F'))
{
    //if (fly) fly = false;
    //else fly = true;
    
    fadeout(-1);
}

if keyboard_check_pressed(ord('G')) {
    fadein(-1);
}

if (global.debug &amp;&amp; keyboard_check(ord("L")) &amp;&amp; mouse_check_button_pressed(mb_left)){
    instance_create(mouse_x,mouse_y,obj_slime_pink);
}

if (room_get_name(room) == "rm_editor" &amp;&amp; global.debug){
    grav_personal = 0;
} else {
    grav_personal = global.grav;
}

if (global.debug &amp;&amp; keyboard_check_pressed(ord('N'))){
    screenShake(10,8);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Debug text

if (keyboard_check_pressed(ord("B"))){
    if (global.debug == false) global.debug = true;
    else global.debug = false;
}

draw_set_halign(fa_right);
draw_set_color(c_white);

if (global.debug == true){
    draw_text(view_wport[0]*2,0,
    "#" +
    "x: " + string(x) +
    "#y: " + string(y) +
    "#spd_x: " + string(spd_x) +
    "#spd_y: " + string(spd_y) +
    "#x div T: " + string(mouse_x div T) +
    "#y div T: " + string(mouse_y div T) +
    "#grav: " + string(global.grav) +
    "#doors: " + string(instance_number(obj_door_1) + instance_number(obj_door_2) + instance_number(obj_door_prev)) +
    "#curlvl: " + string(global.curlvl) +
    "#players: " + string(instance_number(obj_player)) +
    "#grid_type(x+8,y+16): " + string(grid_type(x+8,y+16)) +
    "#imgidx: " + string((floor(obj_player.image_index) + 1)) +
    "#fps: " + string(fps) +
    "#time: " + string(global.time) +
    "#gpaxislh: " + string(gamepad_axis_value(0,gp_axislh)) +
    "#gpaxislv: " + string(gamepad_axis_value(0,gp_axislv)) +
    "#dir: " + string(obj_player.dir) + 
    "#bullets: " + string(instance_number(obj_bullet)) +
    "#weapon: " + string(obj_weapon.wp_current) +
    "#canFire: " +string(obj_weapon.canFire)
    );
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Sprite stuff

// Walking

mask_index = s_dog_run;

anim_walkspeed = 0.2;

if onground(x,y)
{   // ground
    if (abs(spd_x) &lt; 0.2)
    {
        if (global.stick_up){
            sprite_index = s_dog_idle_up;
        } else if global.stick_down{
            sprite_index = s_dog_idle_down;
        } else {
            sprite_index = s_dog_idle;
        }
        
        image_speed = (1/30);
        animstate = "idle";
    }
    else
    {   // moving
        if (global.stick_up){
            sprite_index = s_dog_run_up;
        } else if global.stick_down{
            sprite_index = s_dog_run_down;
        } else {
            sprite_index = s_dog_run;
        }
        
        image_speed = (0.14*abs(spd_x));
        animstate = "moving";
        
        // sound
        if (floor(image_index+1) mod 3 == 0 &amp;&amp; (image_index)-floor(image_index)&lt;0.4){
            // note for future josh:
            // the second part of this condition narrows the window of time
            // the sound can play buy making sure it's on the first
            // fraction of time the frame is shown
            if (!audio_is_playing(snd_tinynoise)){
                audio_play_sound(snd_tinynoise, 10, false);
            }
        }
    }
}
else
{   // air
    if (global.stick_up){
        sprite_index = s_dog_air_up;
    } else if global.stick_down{
        sprite_index = s_dog_air_down;
    } else {
        sprite_index = s_dog_air;
    }
    
    animstate = "air";
}

// invulnerable
if (invuln){
    if (invulnblink){ // transparency
        draw_sprite_ext(sprite_index,-1,x+8-8*sign(dir),y,sign(dir),1,0,c_white,0.25);
    } else {
        draw_sprite_ext(sprite_index,-1,x+8-8*sign(dir),y,sign(dir),1,0,c_white,1);
    }
    
    // blink
    if (alarm[1] &lt; 0){
        alarm[1] = 2 + round(alarm[0]/30);
    }
    
} else {
    draw_sprite_ext(sprite_index,-1,x+8-8*sign(dir),y,sign(dir),1,0,c_white,1);
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// debug text

if (global.debug){
    draw_text(x,y-32,string(hp) + "," + string(alarm[0]) + "," + string(alarm[1]));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
